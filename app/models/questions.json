[{
    "question": "Describe what a closure is.",
    "type": "text",
    "answer": "When an outer function returns an inner function that uses a variable from from the outer function, the inner function still has access to the function in the outer scope even after the outer function has returned (executed).",
    "lang": "js",
    "details" : "",
    "link": "https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures"
},
{
    "question": "Give an example of a closure with explanation.",
    "type": "code",
    "answer": "// The (Revealing) Module Pattern is a common and practical example:\n\nvar Module = (function () {\n\tvar name = 'private';\n\tfunction getName() {\n\t\treturn name;\n\t}\n\treturn {\n\t\tgetName: getName\n\t};\n})();\nconsole.log(Module.getName());\t// 'private'",
    "lang": "js",
    "details" : "The variable name (and also the inner function getName) are available even after the Module function has executed. This is also an example of how to emulate private variables in JavaScript.",
    "link": "https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures"
},
{
    "question": "What is a drawback to using a bunch of closures?",
    "type": "text",
    "answer": "Memory consumption. Since a closure holds a reference to the outer function's variable, it can't be garbage collected.",
    "lang": "js",
    "details" : "",
    "link": "http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/"
},
{
    "question": "What is a benefit of using the Module Pattern?",
    "type": "text",
    "answer": "<ol><li>You can create an encapslated module that is less likely to conflict with other modules</li><li>You get the ability to have public and private methods</li></ol>",
    "lang": "js",
    "details" : "See also the Revealing Module Pattern.",
    "link": "http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript"
},
{
    "question": "Provide example code for how you would go about inserting a node into the DOM tree using JavaScript.",
    "type": "code",
    "answer": "var el = document.createElement('div');\ndocument.body.appendChild(el);",
    "lang": "js",
    "details" : "",
    "link": "https://developer.mozilla.org/en-US/docs/DOM/Node.appendChild"
},
{
    "question": "How do you make a method chainable?",
    "type": "code",
    "answer": "function chainable() {\n\treturn this;\n}",
    "lang": "js",
    "details" : "You return the object itself from the method that gets called by returning 'this'.",
    "link": ""
},
{
    "question": "How can you detect whether an object is an Array?",
    "type": "code",
    "answer": "var someArray = [];\nfunction isArray(arr) {\n\treturn Object.prototype.toString.call(arr) === '[object Array]';\n}\nisArray(someArray);",
    "lang": "js",
    "details" : "You cannot use 'typeof someArray' because JavaScript will return 'object' for that, so a solution is to use the toString method to get a string that reveals that the object is indeed a JavaScript Array.",
    "link": ""
},
{
    "question": "Write a method that will iterate a standard 'for' loop (e.g., 'for (var i=0; i<5; i++)' and log the value of 'i' during each iteration.",
    "type": "code",
    "answer": "function logValues() {\n\tfor (var i=0; i<5; i++) {\n\t\twindow.setTimeout((function (current) {\n\t\t\treturn function () {\n\t\t\t\tconsole.log(current);\n\t\t\t};\n\t\t})(i), 0);\n\t}\n}\nlogValues();",
    "lang": "js",
    "details" : "Because of closures, 'i' is bound as a reference to the value defined in the outer scope. To get the current value of 'i' during each iteration, you need to pass the value into a new scope.",
    "link": ""
},
{
    "question": "Write a method that could be used to 'throttle' an event that fires frequently, like a window resize. The method should be designed to ensure that a callback on the event will only occur once during a defined interval.",
    "type": "code",
    "answer": "var update = function() { console.log('update') };\nvar throttle = (function () {\n\tvar timer;\n\treturn function (callback, interval) {\n\t\tif (timer) {\n\t\t\twindow.clearTimeout(timer);\n\t\t}\n\t\ttimer = window.setTimeout(callback, interval);\n\t};\n})();\n$(window).on('resize', function () {\n\tthrottle(update, 200);\n});",
    "lang": "js",
    "details" : "This will call the update() method only once in 200 milliseconds if the browser window is resized. This is useful for taking actions based on responsive web design, but not incurring the expense of firing this callback many times within a few milliseconds, like resize does by default. You might also want to look at <a href='http://unscriptable.com/2009/03/20/debouncing-javascript-methods/' target='_blank'>debouncing</a>, which ensures the callback will also only be executed once.",
    "link": ""
}]

